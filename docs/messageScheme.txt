communication between manager and drones

All messages will include a message number, which is unique when combined with the sender ID, used to associate responses with messages where necessary. It is also used to ignore repeated delivery of messages, though it will will re-send an ack each time it receives a message.

All messages other than "ack" will get an automaticly-generated "ack" response as soon as it is recieved and queued, but not necessarily handled, by the target system. "acks" are sent even where the list below indicates another response packet; response packets other than ack will be generated by after the message is processed from the queue, and
sent after the ack.


Communication between managers and drones will, in the general case, be done locally, by direct rednet communication, without intermediate routing. In some cases, where turtles operate over a large area rather than within a defined facility, in which case they will fall back on using the routing network to deliver messages. This may result in minor changes to the message format, but such changes will be processed automatically within the messaging api, so the drone and manager code will not have to make any consideration of which transport method is used.

message format:
    msgID|messageType|args
    
    msgID - number, the messageID assigned by the sender
    messageType - a string defining the type of message
    args - a serialized table of additonal arguments
    

These are the generic messages common to all managers/drones; additional message types may defined by facilities.


common messages:

    
    ack - basic acknowledgement message, params are the type and id of the message being ack'd.
       		never queued, simply handled automatically in messaging api
       		
    	params: 
    	  string  msgType   the base type of the message being ack'd
    	  number  msgID    the numeric id of the message being ack'd

      
    reqStatus - get the status of the turtle. Current job, current task in job, size of queue, current fuel level?
      params: 
      	number	messageID
      
      response: droneStatus or facilStatus


manager->drone messages:

    queueJob - append a job to the queue.
    	Accepted only from it's assigned manager.
    	
      params:
      	string 	jobName
      	table	job definition
      		see: jobDefinition.txt for a description of job definition tables.
      	
      
    priorityJob - queue this job at the TOP of the queue instead of the bottom, so it will be the next job performed
      params: 
      	string	jobName
        table	job definition
      		see: jobDefinition.txt for a description of job definition tables.
      	      
        	
    	
    	
  drone->manager messages:
    
    droneStatus
    	params:			
 	  number 	fuelLevel	current fuel level
	  string	curTask		current task name
	  string	curJob		current job ID
	  location	location	x/y/z+facing
	  number	manager		the id of the manager this drone is assigned to
	  string	facilType	the type of facility this drone is assigned to
	  
	  addl. job/task-specific fields
	  
    reqJobDefinition - requests the definition of a job from a manager. Sent when a drone is assigned a job it doesn't know how to do.
    	params: 
    	  string  jobName 
    	
    	response: jobDefinition
    
    jobCompleted - sent when a job is completed.
      params:
        number  jobsLeft   number of jobs remaining in it's queue
        string  nextJob    name of the next job in the queue
        number  jobID      numeric id of the job in the queue
              	


manager->Manager and terminal->manager messages

 	reqStatus
 	   response: facilStatus
 	   
 	facilStatus
 	   params:
 	     table	state	table of key-value pairs defining the state of the facility. 
 	     			Specific set of state properties depends on the type of facility.
 	     			common keys to all facilities:
 	     			string		type		the type of facility
 	     			boolean		online		is the facility online?
 	     			number		numDrones	number of drones currently assigned here
 	     			vector		location	the x,y,z coordinates of the facility
 	     			number		fuelSupply	the current supply of fuel at this facility
 	     			list		products	list of the names of items this facility outputs
 	     			list		supplies	list of the names of items this facility consumes in operation
 	     			list		services	list of the names of services this facility provides
 	    
	reqInventory
	  params: 
	    list	items 	list of item names to request inventory info for. If empty, requests complete inventory.
	    
	  response: 	facilInventory
	  
	
	inventory
	  params:
	    table	inventory	table with item types as keys mapping to quantities of each item.
	
	
	reqAdminActions  requests a list of the administrative commands this facility exposes. Used to generate remote administration interface.
	 
	adminActions
	  args:
	  	array of tables describing adminstrative actions.
	  	
	  	See adminActions.txt for documentation on administrative actions.
	    
	
	
	
	    
	
 	     			